(withs (winders (parameter)

        do-wind (fn (new)
                  (let tail (common-tail new (winders))
                    ((afn (ls)
                       (when (isnt ls tail)
                         ((cdar ls))
                         (self (cdr ls))))
                     (winders))
                    ((afn (ls)
                       (when (isnt ls tail)
                         (self (cdr ls))
                         ((caar ls))))
                     new))))

  (def ccc (f)
    (prim-ccc (fn (k)
                (f (let save (winders)
                     (fn (x)
                       (unless (is save (winders))
                         (do-wind save))
                       (k x)))))))

  (def dynamic-wind (in body out)
    (unless (isa in 'fn)   (err "oops in is not a fn"))
    (unless (isa body 'fn) (err "oops body is not a fn"))
    (unless (isa out 'fn)  (err "oops out is not a fn"))

    (with (xin  (capture-dyn in)
           xout (capture-dyn out))
      (xin)
      (let r
           (parameterize winders (cons (cons xin xout) (winders))
             (body))
        (xout)
        r))))
